package core.pages;

import com.codeborne.selenide.Condition;
import core.element.SElement;
import core.pages.actionbar.ActionBar;
import core.pages.actionbar.TopActionBar;
import core.pages.inboxpage.mailslist.MailList;
import core.pages.leftmenu.LeftMenu;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import ru.yandex.qatools.allure.annotations.Step;

/**
 * Created by Aleks on 27.06.2017.
 */
public class InboxPage extends MailPage {

    protected ActionBar actionBar;

    protected SElement successSendEle;


    public InboxPage() {
        topActionBar = new TopActionBar();
        actionBar = new ActionBar();
        leftMenu = new LeftMenu();
        successSendEle = new SElement(By.xpath("//div[@class ='mail-Done js-done']"));
    }

    private MailList getAllMails() {
        return new MailList();
    }

    protected ActionBar getActionBar() {
        actionBar = new ActionBar();
        return actionBar;
    }

    @Step("Открыть страницу нового письма")
    public NewLetterPage openNewMailPage() {
        topActionBar.getWriteNewMailButton().click();
        return new NewLetterPage();
    }

    @Step("Выбрать письмо с темой {0}")
    public InboxPage selectMail(String subj) {
        getAllMails().getMailWithSubjEle(subj).getSelectChecker().click();
        return new InboxPage();
    }

    @Step("Отменить письмо с темой {0} как избранное")
    public InboxPage selectMailAsFavorite(String subj) {
        getAllMails().getMailWithSubjEle(subj).getFavoriteChecker().click();
        return new InboxPage();
    }

    @Step("Переместить письмо в спам")
    public InboxPage moveSelectedMailToSpam() {
        getActionBar().moveTo("Спам");
        return new InboxPage();
    }

    @Step("Удалить выбранные письма")
    public InboxPage deleteMails() {
        getActionBar().getDeleteButton().click();
        return new InboxPage();
    }


    @Step("Проверяем что письмо с темой {0} удалено")
    public void assertMailsIsDeleted(String subj) {

        getAllMails().getMailWithSubjEle(subj).getSubjTitle().shouldNot(Condition.exist);

    }

    @Step("Проверяем что письмо отправлено")
    public void assertMailIsSend() {
        successSendEle.should(Condition.visible);
    }

    @Step("Проверяем что письмо с темой {0} помечено как избранное(красный цвет флажка)")
    public void assertMailIsFavorite(String subj) {
        getAllMails().getMailWithSubjEle(subj).getFavoriteChecker().should(css("color", "rgba(226, 0, 0, 1)"));
    }

    @Step("Переходим в раздел Спам")
    public SpamPage goToSpam() {
        leftMenu.getSpam().click();
        return new SpamPage();
    }


    public static Condition css(final String propName, final String propValue) {
        return new Condition("css : " + propName + " " + propValue) {
            @Override
            public boolean apply(WebElement element) {
                return propValue.equalsIgnoreCase(element.getCssValue(propName));
            }

            @Override
            public String actualValue(WebElement element) {
                return element.getCssValue(propName);
            }
        };
    }

}

